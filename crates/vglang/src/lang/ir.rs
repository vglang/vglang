//! intermediate representation generated by parser that are used to
//! help semantic analyze and opcode generating.

use parserc::Span;

use crate::opcode::{variable::Variable, Color, Coords, Length, Rgb};

/// Ident token.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct Ident(pub String, pub Span);

/// Literal integer: integer ::= [+-]? [0-9]+
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct LitInt(pub Variable<i64>, pub Span);

/// Literal num: integer ([Ee] integer)? | [+-]? [0-9]* "." [0-9]+ ([Ee] integer)?
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct LitNum(pub Variable<f64>, pub Span);

/// Literal string: "hello", or 'hello'
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct LitStr(pub Variable<String>, pub Span);

/// Literal color data.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub enum LitColor {
    Recognized(Variable<Color>, Span),
    Rgb(Variable<Rgb>, Span),
}

/// Literal coordinate unit: UserSpaceOnUse or ObjectBoundingBox.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct LitCoords(pub Variable<Coords>, pub Span);

/// literal length value: 10cm, 2em
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct LitLength(pub Variable<Length>, pub Span);

/// Literal expr variant.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub enum LitExpr {
    Int(LitInt),
    Number(LitNum),
    Color(LitColor),
    Str(LitStr),
    Coords(LitCoords),
    Length(LitLength),
}

/// A custom attribute for function call.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct Attr {
    /// The span of this attribute.
    span: Span,
    /// Attribute call list.
    calls: Vec<CallExpr>,
}

/// A function call expr.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct CallExpr {
    /// The span of this fn call.
    span: Span,
    /// custom attributes apply to this fn call.
    attrs: Vec<Attr>,
    /// call target function name.
    target: Ident,
    /// function call parameter list.
    params: Vec<LitExpr>,
}

/// The type of fn parameter.
#[derive(Debug, PartialEq, PartialOrd, Clone, Copy)]
pub enum Type {
    Int(Span),
    Number(Span),
    Str(Span),
    Length(Span),
    Color(Span),
    Coords(Span),
}

/// A fn parameter.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct Param {
    /// The span of this param.
    span: Span,
    /// name of this parameter.
    name: Ident,
    /// Parameter type.
    ty: Type,
}

/// A graphic fn declare expr.
#[derive(Debug, PartialEq, PartialOrd, Clone)]
pub struct Fn {
    /// The span of this fn.
    span: Span,
    /// name of this fn.
    name: Ident,
    /// fn parameter list.
    params: Vec<Param>,
}
