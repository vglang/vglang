use proc_macro2::TokenStream;
use quote::quote;

use crate::opcode::Opcode;

/// The rust code generator for `mlang`.
#[allow(unused)]
#[derive(Default)]
pub struct CodeGen {
    /// The flag to open nodes restraint check code generating, default is true.
    restraint: bool,
    /// The flag to open s-expr codes generating, default is true.
    sexpr: bool,
    /// generated nodes definition codes.
    nodes: Vec<TokenStream>,
}

impl CodeGen {
    /// Generate rust codes from `opcodes`.
    pub fn gen(self, _opcodes: &[Opcode]) -> TokenStream {
        quote! {
            //! This file is automatically generated by mlang, do not modify it manually!
        }
    }

    fn gen_nodes(&mut self, opcodes: &[Opcode]) {
        for opcode in opcodes {
            match opcode {
                Opcode::Element(node) => todo!(),
                Opcode::Leaf(node) => todo!(),
                Opcode::Attr(node) => todo!(),
                Opcode::Mixin(node) => todo!(),
                Opcode::Data(node) => todo!(),
                Opcode::Enum(_) => todo!(),
                Opcode::Group(group) => todo!(),
                Opcode::ApplyTo(apply_to) => todo!(),
                Opcode::ChildrenOf(children_of) => todo!(),
            }
        }
    }
}
